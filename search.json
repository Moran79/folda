[{"path":"http://iamwangsiyu.com/folda/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 folda authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://iamwangsiyu.com/folda/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Siyu Wang. Author, maintainer.","code":""},{"path":"http://iamwangsiyu.com/folda/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang S (2024). folda: Forward Stepwise Discriminant Analysis Using ULDA Pillai's Trace. R package version 0.1.0, http://iamwangsiyu.com/folda/, https://github.com/Moran79/folda.","code":"@Manual{,   title = {folda: Forward Stepwise Discriminant Analysis Using ULDA and Pillai's Trace},   author = {Siyu Wang},   year = {2024},   note = {R package version 0.1.0, http://iamwangsiyu.com/folda/},   url = {https://github.com/Moran79/folda}, }"},{"path":"http://iamwangsiyu.com/folda/index.html","id":"folda","dir":"","previous_headings":"","what":"Forward Stepwise Discriminant Analysis Using ULDA and Pillai's Trace","title":"Forward Stepwise Discriminant Analysis Using ULDA and Pillai's Trace","text":"goal folda …","code":""},{"path":"http://iamwangsiyu.com/folda/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Forward Stepwise Discriminant Analysis Using ULDA and Pillai's Trace","text":"can install development version folda GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Moran79/folda\")"},{"path":"http://iamwangsiyu.com/folda/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Forward Stepwise Discriminant Analysis Using ULDA and Pillai's Trace","text":"basic example shows solve common problem: special using README.Rmd instead just README.md? can include R chunks like : ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . can also embed plots, example:  case, don’t forget commit push resulting figure files, display GitHub CRAN.","code":"library(folda) ## basic example code summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00"},{"path":"http://iamwangsiyu.com/folda/reference/checkPriorAndMisClassCost.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and Normalize Prior Probabilities and Misclassification Costs — checkPriorAndMisClassCost","title":"Check and Normalize Prior Probabilities and Misclassification Costs — checkPriorAndMisClassCost","text":"function verifies normalizes provided prior probabilities misclassification cost matrix given response variable. ensures lengths prior dimensions misclassification cost matrix match number levels response variable. prior misClassCost provided, default values used: prior set observed frequencies response, misclassification cost matrix set 1 misclassifications 0 correct classifications.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/checkPriorAndMisClassCost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and Normalize Prior Probabilities and Misclassification Costs — checkPriorAndMisClassCost","text":"","code":"checkPriorAndMisClassCost(prior, misClassCost, response)"},{"path":"http://iamwangsiyu.com/folda/reference/checkPriorAndMisClassCost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and Normalize Prior Probabilities and Misclassification Costs — checkPriorAndMisClassCost","text":"prior numeric vector representing prior probabilities class response variable. NULL, observed frequencies response used default prior. misClassCost square matrix representing misclassification costs pair classes response variable. NULL, default misclassification matrix created misclassifications cost 1 correct classifications cost 0. response factor representing response variable multiple classes.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/checkPriorAndMisClassCost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and Normalize Prior Probabilities and Misclassification Costs — checkPriorAndMisClassCost","text":"list containing: prior normalized vector prior probabilities class. misClassCost square matrix representing misclassification costs, rows columns labeled levels response variable.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/folda.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward Uncorrelated Linear Discriminant Analysis — folda","title":"Forward Uncorrelated Linear Discriminant Analysis — folda","text":"function fits ULDA (Uncorrelated Linear Discriminant Analysis) model provided data, option forward selection variables based Pillai's trace Wilks' Lambda. can also handle missing values, perform downsampling, compute linear discriminant scores group means classification. function returns fitted ULDA model object.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/folda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward Uncorrelated Linear Discriminant Analysis — folda","text":"","code":"folda(   datX,   response,   subsetMethod = c(\"forward\", \"all\"),   testStat = c(\"Pillai\", \"Wilks\"),   correction = TRUE,   alpha = 0.1,   prior = NULL,   misClassCost = NULL,   missingMethod = c(\"medianFlag\", \"newLevel\"),   downSampling = FALSE,   kSample = NULL )"},{"path":"http://iamwangsiyu.com/folda/reference/folda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward Uncorrelated Linear Discriminant Analysis — folda","text":"datX data frame containing predictor variables. response factor representing response variable multiple classes. subsetMethod character string specifying method variable selection. Options \"forward\" forward selection \"\" using variables. Default \"forward\". testStat character string specifying test statistic use forward selection. Options \"Pillai\" \"Wilks\". Default \"Pillai\". correction logical value indicating whether apply multiple comparison correction forward selection. Default TRUE. alpha numeric value 0 1 specifying significance level test statistic forward selection. Default 0.1. prior numeric vector representing prior probabilities class response variable. NULL, observed class frequencies used prior. Default NULL. misClassCost square matrix representing misclassification costs pair classes. NULL, default matrix equal costs used. Default NULL. missingMethod character vector length 2 specifying handle missing values numerical categorical variables, respectively. Default c(\"medianFlag\", \"newLevel\"). downSampling logical value indicating whether perform downsampling balance class distribution training data speed program. Default FALSE. kSample integer specifying maximum number samples take class downsampling. NULL, number samples limited size smallest class. Default NULL.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/folda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward Uncorrelated Linear Discriminant Analysis — folda","text":"list class ULDA containing following components: scaling matrix scaling coefficients linear discriminants. groupMeans group means linear discriminant scores. prior prior probabilities class. misClassCost misclassification cost matrix. misReference reference handling missing values. terms terms used model formula. xlevels levels factors used model. varIdx indices selected variables. varSD standard deviations selected variables. varCenter means selected variables. statPillai Pillai's trace statistic. pValue p-value associated Pillai's trace. predGini Gini index predictions training data. confusionMatrix confusion matrix training data predictions. forwardInfo Information forward selection process, applicable. stopInfo message indicating forward selection stopped, applicable.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/folda.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Forward Uncorrelated Linear Discriminant Analysis — folda","text":"Ye, J., Janardan, R., Park, C. H., & Park, H. (2004). optimization criterion generalized discriminant analysis undersampled problems. IEEE Transactions Pattern Analysis Machine Intelligence Howland, P., Jeon, M., & Park, H. (2003). Structure preserving dimension reduction clustered text data based generalized singular value decomposition. SIAM Journal Matrix Analysis Applications","code":""},{"path":"http://iamwangsiyu.com/folda/reference/folda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward Uncorrelated Linear Discriminant Analysis — folda","text":"","code":"# Fit the ULDA model fit <- folda(datX = iris[, -5], response = iris[, 5], subsetMethod = \"all\")  # Fit the ULDA model with forward selection fit <- folda(datX = iris[, -5], response = iris[, 5], subsetMethod = \"forward\")"},{"path":"http://iamwangsiyu.com/folda/reference/forwardSel.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward Selection via Multivariate Test Statistics — forwardSel","title":"Forward Selection via Multivariate Test Statistics — forwardSel","text":"function performs forward selection dataset based multivariate test statistics (Pillai Wilks). iteratively adds variables contribute test statistic significant variables found stopping criterion met.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/forwardSel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward Selection via Multivariate Test Statistics — forwardSel","text":"","code":"forwardSel(m, response, testStat = \"Pillai\", alpha = 0.1, correction = TRUE)"},{"path":"http://iamwangsiyu.com/folda/reference/forwardSel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward Selection via Multivariate Test Statistics — forwardSel","text":"m numeric matrix containing predictor variables. Rows represent observations columns represent variables. response factor representing response variable multiple levels (groups). testStat character string specifying test statistic use. Can \"Pillai\" (default) \"Wilks\". alpha numeric value 0 1 specifying significance level test. Default 0.1. correction logical value indicating whether apply multiple comparison correction. Default TRUE.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/forwardSel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward Selection via Multivariate Test Statistics — forwardSel","text":"list three components: currentVarList vector selected variable indices based forward selection process. forwardInfo data frame containing detailed information forward selection process, including selected variables, test statistics, thresholds. stopInfo character string describing selection process stopped.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getBestVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Best Variable at Current Step Based on Multivariate Test Statistics — getBestVar","title":"Select Best Variable at Current Step Based on Multivariate Test Statistics — getBestVar","text":"function selects best variable based specified multivariate test statistic (Pillai Wilks). evaluates statistic candidate variable newVar combined currentVar, returns index test statistic best variable. also identifies collinear variables.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getBestVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Best Variable at Current Step Based on Multivariate Test Statistics — getBestVar","text":"","code":"getBestVar(currentVar, newVar, Sw, St, testStat = \"Pillai\")"},{"path":"http://iamwangsiyu.com/folda/reference/getBestVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Best Variable at Current Step Based on Multivariate Test Statistics — getBestVar","text":"currentVar numeric vector indicating indices currently selected variables. newVar numeric vector indicating indices candidate variables tested. Sw matrix representing within-class scatter matrix. St matrix representing total scatter matrix. testStat character string specifying test statistic use. Can either \"Pillai\" \"Wilks\". Default \"Pillai\".","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getBestVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Best Variable at Current Step Based on Multivariate Test Statistics — getBestVar","text":"list containing: stopflag logical value indicating whether best variable collinear (.e., selection stop). varIdx index selected variable newVar based test statistic. stat value test statistic selected variable. collinearVar vector indices newVar representing collinear variables.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getDataInShape.html","id":null,"dir":"Reference","previous_headings":"","what":"Align Data with a Missing Reference — getDataInShape","title":"Align Data with a Missing Reference — getDataInShape","text":"function aligns given dataset (data) reference dataset (missingReference). ensures structure, column names, factor levels data match structure missingReference. necessary, missing columns initialized NA, factor levels adjusted match reference. Additionally, handles imputation missing values based reference manages flag variables categorical numerical columns.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getDataInShape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align Data with a Missing Reference — getDataInShape","text":"","code":"getDataInShape(data, missingReference)"},{"path":"http://iamwangsiyu.com/folda/reference/getDataInShape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align Data with a Missing Reference — getDataInShape","text":"data data frame aligned adjusted according missingReference. missingReference reference data frame provides structure (column names, factor levels, missing value reference) aligning data.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getDataInShape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align Data with a Missing Reference — getDataInShape","text":"data frame structure, column names, factor levels data aligned missingReference. Missing values data imputed based first row missingReference, flag variables updated accordingly.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getDataInShape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align Data with a Missing Reference — getDataInShape","text":"","code":"data <- data.frame(   X1_FLAG = c(0, 0, 0),   X1 = factor(c(NA, \"C\", \"B\"), levels = LETTERS[2:3]),   X2_FLAG = c(NA, 0, 1),   X2 = c(2, NA, 3) )  missingReference <- data.frame(   X1_FLAG = 1,   X1 = factor(\"A\", levels = LETTERS[1:2]),   X2 = 1,   X2_FLAG = 1 )  getDataInShape(data, missingReference) #>   X1_FLAG X1 X2 X2_FLAG #> 1       1  A  2       0 #> 2       1  A  1       1 #> 3       0  B  3       1"},{"path":"http://iamwangsiyu.com/folda/reference/getDesignMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the Design Matrix for LDA Model — getDesignMatrix","title":"Generate the Design Matrix for LDA Model — getDesignMatrix","text":"Generate Design Matrix LDA Model","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getDesignMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the Design Matrix for LDA Model — getDesignMatrix","text":"","code":"getDesignMatrix(modelLDA, data, scale = FALSE)"},{"path":"http://iamwangsiyu.com/folda/reference/getDesignMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the Design Matrix for LDA Model — getDesignMatrix","text":"modelLDA fitted LDA model object containing terms, variable indices, variable centers, scaling factors. data data frame containing predictor variables used create design matrix. scale logical value indicating whether scale design matrix based mean standard deviation variables (default FALSE).","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getDownSampleInd.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to Generate Training Set Indices Through Downsampling — getDownSampleInd","title":"Helper Function to Generate Training Set Indices Through Downsampling — getDownSampleInd","text":"function selects indices training set based class vector response. allows optional downsampling balance class distribution limiting number samples per class.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getDownSampleInd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Generate Training Set Indices Through Downsampling — getDownSampleInd","text":"","code":"getDownSampleInd(response, downSampling = FALSE, kSample = NULL)"},{"path":"http://iamwangsiyu.com/folda/reference/getDownSampleInd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Generate Training Set Indices Through Downsampling — getDownSampleInd","text":"response factor vector representing class labels. downSampling logical value indicating whether downsampling applied. TRUE, downsampling performed limit number samples per class based kSample. Note may result equal class frequencies, kSample defines upper limit class, lower limit. kSample integer specifying maximum number samples selected per class. NULL, number samples limited size smallest class.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getDownSampleInd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to Generate Training Set Indices Through Downsampling — getDownSampleInd","text":"integer vector indices representing selected samples original response vector.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getLDscores.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Linear Discriminant Scores — getLDscores","title":"Compute Linear Discriminant Scores — getLDscores","text":"Compute Linear Discriminant Scores","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getLDscores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Linear Discriminant Scores — getLDscores","text":"","code":"getLDscores(modelLDA, data, nScores = -1)"},{"path":"http://iamwangsiyu.com/folda/reference/getLDscores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Linear Discriminant Scores — getLDscores","text":"modelLDA fitted LDA model object containing scaling matrix reference structure missing data. data data frame containing predictor variables compute linear discriminant scores. nScores integer specifying number discriminant scores compute. -1 (default), scores computed.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getMode.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Mode of a Factor Variable with Optional Priors — getMode","title":"Calculate the Mode of a Factor Variable with Optional Priors — getMode","text":"Calculate Mode Factor Variable Optional Priors","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getMode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Mode of a Factor Variable with Optional Priors — getMode","text":"","code":"getMode(v, prior)"},{"path":"http://iamwangsiyu.com/folda/reference/getMode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Mode of a Factor Variable with Optional Priors — getMode","text":"v factor vector can coerced factor. mode calculated levels factor. prior numeric vector prior weights level factor.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getMode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Mode of a Factor Variable with Optional Priors — getMode","text":"mode factor v character string. values NA, function returns NA.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getNumFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Numeric, Integer, or Logical Columns in a Data Frame — getNumFlag","title":"Identify Numeric, Integer, or Logical Columns in a Data Frame — getNumFlag","text":"function checks whether columns data frame (vector) type numeric, integer, logical. can return logical vector indicating whether column matches types, , index = TRUE, returns indices matching columns.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/getNumFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Numeric, Integer, or Logical Columns in a Data Frame — getNumFlag","text":"","code":"getNumFlag(data, index = FALSE)"},{"path":"http://iamwangsiyu.com/folda/reference/getNumFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Numeric, Integer, or Logical Columns in a Data Frame — getNumFlag","text":"data data frame vector. function check data types columns (data data frame) type vector. index logical value. FALSE (default), function returns logical vector indicating columns numeric, integer, logical. TRUE, returns indices columns.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/missingFix.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Values and Add Missing Flags to a Data Frame — missingFix","title":"Impute Missing Values and Add Missing Flags to a Data Frame — missingFix","text":"function imputes missing values data frame based specified methods numerical categorical variables. Additionally, can add flag columns indicate missing values. numerical variables, missing values can imputed using mean median. categorical variables, missing values can imputed using mode new level. function also removes constant columns (NAs observed value).","code":""},{"path":"http://iamwangsiyu.com/folda/reference/missingFix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Values and Add Missing Flags to a Data Frame — missingFix","text":"","code":"missingFix(data, missingMethod = c(\"medianFlag\", \"newLevel\"))"},{"path":"http://iamwangsiyu.com/folda/reference/missingFix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Values and Add Missing Flags to a Data Frame — missingFix","text":"data data frame containing data processed. Missing values (NA) imputed based methods provided missingMethod. missingMethod character vector length 2 specifying methods imputing missing values. first element specifies method numerical variables (\"mean\", \"median\", \"meanFlag\", \"medianFlag\"), second element specifies method categorical variables (\"mode\", \"modeFlag\", \"newLevel\"). \"Flag\" included, flag column added corresponding variable type.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/missingFix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Values and Add Missing Flags to a Data Frame — missingFix","text":"list two elements: data original data frame missing values imputed, flag columns added applicable. ref reference row containing imputed values flag levels, can used future predictions reference.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/missingFix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Values and Add Missing Flags to a Data Frame — missingFix","text":"","code":"dat <- data.frame(   X1 = rep(NA, 5),   X2 = factor(rep(NA, 5), levels = LETTERS[1:3]),   X3 = 1:5,   X4 = LETTERS[1:5],   X5 = c(NA, 2, 3, 10, NA),   X6 = factor(c(\"A\", NA, NA, \"B\", \"B\"), levels = LETTERS[1:3]) ) missingFix(dat) #> $data #>   X3 X4 X5          X6 X5_FLAG #> 1  1  A  3           A       1 #> 2  2  B  2 new0_0Level       0 #> 3  3  C  3 new0_0Level       0 #> 4  4  D 10           B       0 #> 5  5  E  3           B       1 #>  #> $ref #>   X3 X4 X5          X6 X5_FLAG #> 6  3  A  3 new0_0Level       1 #>"},{"path":"http://iamwangsiyu.com/folda/reference/nonConstInd.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Non-Constant Columns in a Data Frame — nonConstInd","title":"Identify Non-Constant Columns in a Data Frame — nonConstInd","text":"Identify Non-Constant Columns Data Frame","code":""},{"path":"http://iamwangsiyu.com/folda/reference/nonConstInd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Non-Constant Columns in a Data Frame — nonConstInd","text":"","code":"nonConstInd(data, tol = 1e-08, na.rm = FALSE)"},{"path":"http://iamwangsiyu.com/folda/reference/nonConstInd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Non-Constant Columns in a Data Frame — nonConstInd","text":"data data frame columns checked constant values. Columns can type (numeric, integer, logical, factor). tol numeric tolerance value (default 1e-8) applies numerical columns. na.rm logical value. FALSE (default), missing values retained check.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/nonConstInd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Non-Constant Columns in a Data Frame — nonConstInd","text":"integer vector containing indices non-constant columns data frame. columns constant, empty vector returned.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/plot.ULDA.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Decision Boundaries and Linear Discriminant Scores — plot.ULDA","title":"Plot Decision Boundaries and Linear Discriminant Scores — plot.ULDA","text":"function plots decision boundaries linear discriminant (LD) scores given ULDA model. binary classification problem, density plot created. Otherwise, scatter plot decision boundaries generated.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/plot.ULDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Decision Boundaries and Linear Discriminant Scores — plot.ULDA","text":"","code":"# S3 method for class 'ULDA' plot(object, datX, response, ...)"},{"path":"http://iamwangsiyu.com/folda/reference/plot.ULDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Decision Boundaries and Linear Discriminant Scores — plot.ULDA","text":"object fitted ULDA model object. datX data frame containing predictor variables. response factor representing response variable (training labels) corresponding datX. ... Additional arguments.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/plot.ULDA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Decision Boundaries and Linear Discriminant Scores — plot.ULDA","text":"ggplot2 plot object, either density plot scatter plot decision boundaries.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/plot.ULDA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Decision Boundaries and Linear Discriminant Scores — plot.ULDA","text":"","code":"# Assuming you have a fitted ULDA model object `model` fit <- folda(datX = iris[, -5], response = iris[, 5], subsetMethod = \"all\") plot(fit, iris[, -5], iris[, 5]) #> Error in loadNamespace(x): there is no package called ‘ggplot2’"},{"path":"http://iamwangsiyu.com/folda/reference/predict.ULDA.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Method for ULDA Model — predict.ULDA","title":"Predict Method for ULDA Model — predict.ULDA","text":"function predicts class labels class probabilities new data using fitted ULDA model. prediction can return either likely class (\"response\") posterior probabilities class (\"prob\").","code":""},{"path":"http://iamwangsiyu.com/folda/reference/predict.ULDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Method for ULDA Model — predict.ULDA","text":"","code":"# S3 method for class 'ULDA' predict(object, newdata, type = c(\"response\", \"prob\"), ...)"},{"path":"http://iamwangsiyu.com/folda/reference/predict.ULDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Method for ULDA Model — predict.ULDA","text":"object fitted ULDA model object. newdata data frame containing new predictor variables predictions made. type character string specifying type prediction return. \"response\" returns predicted class labels, \"prob\" returns posterior probabilities class. Default \"response\". ... Additional arguments.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/predict.ULDA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Method for ULDA Model — predict.ULDA","text":"type = \"response\", function returns vector predicted class labels. type = \"prob\", returns matrix posterior probabilities, row corresponds sample column class.","code":""},{"path":"http://iamwangsiyu.com/folda/reference/predict.ULDA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Method for ULDA Model — predict.ULDA","text":"","code":"fit <- folda(datX = iris[, -5], response = iris[, 5], subsetMethod = \"all\")  # Predict class labels predictions <- predict(fit, iris, type = \"response\")  # Predict class probabilities prob_predictions <- predict(fit, iris, type = \"prob\")"}]
